// This file contains all the string templates for generating a new Next.js application.

export const getFileContentTemplates = (appName, apiUrl, features, embedToken, onboardingSteps, paymentEmbedTokens, customPages = [], branding = {}, port = 3000, usesChatbot = false) => {
  const { logoUrl, copyrightText, socials, legal } = branding;
  
  const customPageEnvVars = customPages
    .filter(p => p.embeds && p.embeds.length > 0)
    .map(p => {
        const pageNameUpper = p.name.replace(/\s+/g, '_').toUpperCase();
        const varName = `NEXT_PUBLIC_${pageNameUpper}_EMBED_TOKENS`;
        return `# Embeds for the ${p.name} page (${p.path})\n${varName}=${p.embeds.join(',')}`;
    })
    .join('\n\n');

  const envExample = `
# This should point to your deployed QR-Embed instance
NEXT_PUBLIC_QR_EMBED_URL=${apiUrl}
${features.authPage ? `\n# Auth embed token for the /login page\nNEXT_PUBLIC_EMBED_TOKEN=${embedToken || ''}` : ''}
${features.payments ? `\n# Comma-separated list of payment embed tokens for the /pricing page\nNEXT_PUBLIC_PAYMENT_EMBED_TOKENS=${(paymentEmbedTokens || []).join(',')}` : ''}
${customPageEnvVars ? `\n${customPageEnvVars}` : ''}
${usesChatbot ? `\n# Your OpenAI API key for the chatbot feature. This is used on the server and is kept secret.\n# OPENAI_API_KEY=` : ''}
`.trim();

  return {
    // --- ROOT FILES ---
    jsconfig: JSON.stringify({
      compilerOptions: {
        paths: {
          "@/*": ["./src/*"]
        }
      }
    }, null, 2),

    packageJson: JSON.stringify({
      name: appName,
      version: "0.1.0",
      private: true,
      scripts: {
        dev: `next dev -p ${port}`,
        build: "next build",
        start: `next start -p ${port}`,
        lint: "next lint"
      },
      dependencies: {
        "next": "14.2.3",
        "react": "^18",
        "react-dom": "^18"
      },
      devDependencies: {
        "postcss": "^8",
        "tailwindcss": "^3.4.1",
        "eslint": "^8",
        "eslint-config-next": "14.2.3"
      }
    }, null, 2),

    readme: `
# ${appName}

This application was generated by the QR-Embed App Wizard.

## Getting Started

### 1. Setup Environment Variables

This project includes two environment variable files:
- \`.env.local.example\`: The standard template file.
- \`env.txt\`: A plain text version, in case your computer hides files starting with a dot.

**Copy either file to a new file named \`.env.local\`** and fill in the required values.

For example:
\`\`\`bash
cp .env.local.example .env.local
\`\`\`
Or, if you can't see the .env file:
\`\`\`bash
cp env.txt .env.local
\`\`\`

Your new \`.env.local\` file should look like this:
\`\`\`
${envExample}
\`\`\`

### 2. Install Dependencies and Run

\`\`\`bash
npm install
npm run dev
\`\`\`

Open [http://localhost:${port}](http://localhost:${port}) with your browser to see the result.
    `,

    envExample: envExample,

    nextConfig: `
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  async rewrites() {
    const apiUrl = process.env.NEXT_PUBLIC_QR_EMBED_URL;
    if (!apiUrl) {
      console.warn('NEXT_PUBLIC_QR_EMBED_URL is not set. API rewrites will not be configured.');
      return [];
    }
    return [
      {
        source: '/api/auth/:path*',
        destination: \`\${apiUrl}/api/auth/:path*\`,
      },
      {
        source: '/api/users/:path*',
        destination: \`\${apiUrl}/api/users/:path*\`,
      },
    ]
  },
};

export default nextConfig;
    `,
    
    postcssConfig: `
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};
    `,

    tailwindConfig: `
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
};
    `,

    // --- SRC/AUTH FILES ---
    authProvider: `
import React, { createContext, useState, useEffect, useContext, useCallback } from 'react';

const AuthContext = createContext(null);

export function AuthProvider({ children }) {
  const [user, setUser] = useState(null);
  const [permissions, setPermissions] = useState([]);
  const [loading, setLoading] = useState(true);

  const fetchSession = useCallback(async () => {
    setLoading(true);
    try {
      const res = await fetch('/api/auth/me', { credentials: 'include' });
      if (res.ok) {
        const { user: userData, permissions: userPermissions } = await res.json();
        setUser(userData);
        setPermissions(userPermissions);
      } else {
        setUser(null);
        setPermissions([]);
      }
    } catch (error) {
      console.error("Failed to fetch user session:", error);
      setUser(null);
      setPermissions([]);
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchSession();
  }, [fetchSession]);

  const logout = async () => {
    await fetch('/api/auth/logout', { method: 'POST', credentials: 'include' });
    setUser(null);
    setPermissions([]);
  };

  const hasPermission = (requiredPermission) => {
    return permissions.includes(requiredPermission);
  };

  const value = { user, permissions, isAuthenticated: !!user, loading, logout, hasPermission, fetchSession };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
}

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};
    `,

    canComponent: `
import { useAuth } from './AuthProvider';

const Can = ({ permission, children }) => {
  const { hasPermission } = useAuth();
  if (!hasPermission(permission)) {
    return null;
  }
  return <>{children}</>;
};

export default Can;
    `,
    
    withAuth: `
import { useRouter } from 'next/router';
import { useAuth } from './AuthProvider';
import { useEffect } from 'react';

const withAuth = (WrappedComponent) => {
  const Wrapper = (props) => {
    const { isAuthenticated, loading, user } = useAuth();
    const router = useRouter();
    const onboardingEnabled = ${features.onboarding};

    useEffect(() => {
      if (loading) return;

      if (!isAuthenticated) {
        router.push('/login');
        return;
      }
      
      if (onboardingEnabled && !user.onboardingCompletedAt && !router.pathname.startsWith('/onboarding')) {
        router.push('/onboarding/step-1');
      }

    }, [isAuthenticated, loading, user, router, onboardingEnabled]);

    if (loading || !isAuthenticated) {
      return (
        <div className="min-h-screen flex items-center justify-center">
          <p>Loading...</p>
        </div>
      );
    }

    if (onboardingEnabled && !user.onboardingCompletedAt && !router.pathname.startsWith('/onboarding')) {
      return (
        <div className="min-h-screen flex items-center justify-center">
          <p>Redirecting to onboarding...</p>
        </div>
      );
    }

    return <WrappedComponent {...props} />;
  };
  return Wrapper;
};

export default withAuth;
    `,

    // --- SRC/COMPONENTS ---
    headerComponent: `
import Link from 'next/link';
import { useAuth } from '@/auth/AuthProvider';
import Can from '@/auth/Can';

export default function Header() {
  const { isAuthenticated, user, logout } = useAuth();
  const logoUrl = "${logoUrl || ''}";
  const appName = "${appName}";

  return (
    <header className="bg-white shadow-sm">
      <nav className="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="w-full py-4 flex items-center justify-between border-b border-gray-200">
          <div className="flex items-center space-x-8">
            <Link href="/" className="flex items-center space-x-2 text-xl font-bold text-gray-900">
              {logoUrl && <img src={logoUrl} alt={\`\${appName} logo\`} className="h-8 w-auto" />}
              <span>{appName}</span>
            </Link>
            <div className="space-x-4">
              ${features.payments ? `<Link href="/pricing" className="text-sm font-medium text-gray-700 hover:text-indigo-600">Pricing</Link>` : ''}
              ${customPages.map(page => `<Link href="${page.path}" className="text-sm font-medium text-gray-700 hover:text-indigo-600">${page.name}</Link>`).join('\n              ')}
            </div>
          </div>
          <div className="space-x-4 flex items-center">
            {isAuthenticated ? (
              <>
                <span className="text-sm text-gray-600 hidden sm:inline">Welcome, {user.name || user.email}</span>
                <Link href="/dashboard" className="text-sm font-medium text-gray-700 hover:text-indigo-600">Dashboard</Link>
                ${features.adminDashboard ? `
                <Can permission="admin:dashboard:view">
                  <Link href="/admin" className="text-sm font-medium text-gray-700 hover:text-indigo-600">Admin</Link>
                </Can>
                ` : ''}
                <button onClick={logout} className="text-sm font-medium text-gray-700 hover:text-indigo-600">Logout</button>
              </>
            ) : (
              <>
                <Link href="/login" className="text-sm font-medium text-gray-700 hover:text-indigo-600">Login</Link>
              </>
            )}
          </div>
        </div>
      </nav>
    </header>
  );
}
    `,

    footerComponent: `
import Link from 'next/link';

const TwitterIcon = () => <svg className="h-6 w-6" fill="currentColor" viewBox="0 0 24 24"><path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.71v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84" /></svg>;
const GithubIcon = () => <svg className="h-6 w-6" fill="currentColor" viewBox="0 0 24 24"><path fillRule="evenodd" d="M12 2C6.477 2 2 6.477 2 12c0 4.418 2.865 8.168 6.839 9.49.5.092.682-.217.682-.482 0-.237-.009-.868-.014-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.031-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.203 2.398.1 2.651.64.7 1.03 1.595 1.03 2.688 0 3.848-2.338 4.695-4.566 4.943.359.308.678.92.678 1.855 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.001 10.001 0 0022 12c0-5.523-4.477-10-10-10z" clipRule="evenodd" /></svg>;

export default function Footer() {
  const copyrightText = "${copyrightText || ''}";
  const socials = ${JSON.stringify(socials || {})};
  const legal = ${JSON.stringify(legal || {})};

  return (
    <footer className="bg-white">
      <div className="max-w-5xl mx-auto py-4 px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center">
          <div className="flex space-x-6">
            {socials.twitter && <a href={socials.twitter} className="text-gray-400 hover:text-gray-500"><span className="sr-only">Twitter</span><TwitterIcon /></a>}
            {socials.github && <a href={socials.github} className="text-gray-400 hover:text-gray-500"><span className="sr-only">GitHub</span><GithubIcon /></a>}
          </div>
          <div className="flex space-x-4 text-sm text-gray-500">
            {legal.privacy && <Link href="/privacy" className="hover:text-gray-600">Privacy Policy</Link>}
            {legal.terms && <Link href="/terms" className="hover:text-gray-600">Terms of Service</Link>}
          </div>
        </div>
        <p className="mt-4 text-center text-sm text-gray-400">{copyrightText}</p>
      </div>
    </footer>
  );
}
    `,

    embedLoaderComponent: `
import { useEffect } from 'react';

export default function EmbedLoader({ apiHost, token, targetId }) {
  useEffect(() => {
    if (!apiHost || !token || !targetId) return;

    const container = document.getElementById(targetId);
    if (!container) return;

    const script = document.createElement('script');
    script.src = \`\${apiHost}/embed.js\`;
    script.defer = true;
    script.dataset.token = token;
    script.dataset.host = apiHost;
    script.dataset.targetId = targetId;

    container.appendChild(script);

    // Cleanup function to remove the script and clear the container
    return () => {
      if (container) {
        container.innerHTML = '';
      }
    };
  }, [apiHost, token, targetId]);

  return <div id={targetId} className="min-h-[400px] flex items-center justify-center"></div>;
}
    `,

    // --- SRC/STYLES ---
    globalsCss: `
@tailwind base;
@tailwind components;
@tailwind utilities;
    `,

    // --- SRC/PAGES ---
    appJs: `
import { AuthProvider } from '@/auth/AuthProvider';
import Header from '@/components/Header';
import Footer from '@/components/Footer';
import '@/styles/globals.css';

export default function App({ Component, pageProps }) {
  return (
    <AuthProvider>
      <div className="min-h-screen bg-gray-50 flex flex-col">
        <Header />
        <main className="flex-grow">
          <Component {...pageProps} />
        </main>
        <Footer />
      </div>
    </AuthProvider>
  );
}
    `,

    landingPage: `
import Head from 'next/head';

export default function LandingPage() {
  return (
    <>
      <Head>
        <title>Welcome to ${appName}</title>
      </Head>
      <div className="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 py-16 text-center">
        <h1 className="text-4xl sm:text-5xl font-extrabold text-gray-900">
          Welcome to ${appName}
        </h1>
        <p className="mt-6 max-w-2xl mx-auto text-lg text-gray-600">
          This is your brand new application, ready to go.
        </p>
      </div>
    </>
  );
}
    `,

    loginPage: `
import Head from 'next/head';
import { useEffect, useState } from 'react';
import EmbedLoader from '@/components/EmbedLoader';

export default function LoginPage() {
  const [embedToken, setEmbedToken] = useState('');
  const [apiHost, setApiHost] = useState('');

  useEffect(() => {
    setEmbedToken(process.env.NEXT_PUBLIC_EMBED_TOKEN);
    setApiHost(process.env.NEXT_PUBLIC_QR_EMBED_URL);
  }, []);

  return (
    <>
      <Head>
        <title>Login - ${appName}</title>
      </Head>
      <div className="max-w-md mx-auto mt-16">
        {embedToken && apiHost ? (
          <EmbedLoader
            apiHost={apiHost}
            token={embedToken}
            targetId="qr-embed-container"
          />
        ) : (
          <div className="text-center p-8 bg-white shadow rounded-lg">
            <h2 className="text-xl font-bold text-red-600">Configuration Missing</h2>
            <p className="mt-2 text-gray-700">
              Please set the \`NEXT_PUBLIC_EMBED_TOKEN\` in your \`.env.local\` file to see the login component.
            </p>
          </div>
        )}
      </div>
    </>
  );
}
    `,

    dashboardPage: `
import Head from 'next/head';
import withAuth from '@/auth/withAuth';
import Can from '@/auth/Can';

function Dashboard() {
  return (
    <>
      <Head>
        <title>Dashboard - ${appName}</title>
      </Head>
      <div className="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <h1 className="text-3xl font-bold text-gray-900">User Dashboard</h1>
        <p className="mt-4 text-gray-600">
          You are logged in and can see this protected page.
        </p>
        
        <div className="mt-8 p-6 bg-white border rounded-lg">
          <h2 className="text-xl font-semibold">Permissions Demo</h2>
          <p className="text-sm text-gray-500 mt-1 mb-4">
            Use the \`<Can>\` component to show or hide UI elements based on user permissions.
          </p>
          
          <Can permission="project:create">
            <div className="p-4 bg-green-50 border border-green-200 rounded-md">
              <p className="font-medium text-green-800">
                You have the 'project:create' permission! You can see this content.
              </p>
            </div>
          </Can>
          
          <Can permission="user:manage">
            <div className="mt-4 p-4 bg-blue-50 border border-blue-200 rounded-md">
              <p className="font-medium text-blue-800">
                You have the 'user:manage' permission! You can see this admin-only content.
              </p>
            </div>
          </Can>
        </div>
      </div>
    </>
  );
}

export default withAuth(Dashboard);
    `,

    adminPage: `
import Head from 'next/head';
import withAuth from '@/auth/withAuth';

function AdminDashboard() {
  return (
    <>
      <Head>
        <title>Admin Dashboard - ${appName}</title>
      </Head>
      <div className="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <h1 className="text-3xl font-bold text-gray-900">Admin Dashboard</h1>
        <p className="mt-4 text-gray-600">
          This is a protected page for administrators. Your access is controlled by the Route Permissions you configured in the QR-Embed dashboard.
        </p>
      </div>
    </>
  );
}

export default withAuth(AdminDashboard);
    `,

    pricingPage: `
import Head from 'next/head';
import { useEffect, useState } from 'react';
import EmbedLoader from '@/components/EmbedLoader';

export default function PricingPage() {
  const [paymentTokens, setPaymentTokens] = useState([]);
  const [apiHost, setApiHost] = useState('');

  useEffect(() => {
    setApiHost(process.env.NEXT_PUBLIC_QR_EMBED_URL);
    const tokens = (process.env.NEXT_PUBLIC_PAYMENT_EMBED_TOKENS || '').split(',').filter(Boolean);
    setPaymentTokens(tokens);
  }, []);

  return (
    <>
      <Head>
        <title>Pricing - ${appName}</title>
      </Head>
      <div className="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
        <div className="text-center">
          <h1 className="text-4xl font-extrabold text-gray-900">Our Pricing</h1>
          <p className="mt-4 max-w-2xl mx-auto text-lg text-gray-600">
            Choose the plan that's right for you.
          </p>
        </div>
        
        <div className="mt-12 flex flex-wrap justify-center items-start gap-8">
          {paymentTokens.length > 0 && apiHost ? (
            paymentTokens.map((token, index) => (
              <EmbedLoader
                key={token}
                apiHost={apiHost}
                token={token}
                targetId={\`payment-embed-\${index}\`}
              />
            ))
          ) : (
            <p className="text-gray-500">Pricing plans are not configured. Please set NEXT_PUBLIC_PAYMENT_EMBED_TOKENS in your .env.local file.</p>
          )}
        </div>
      </div>
    </>
  );
}
    `,

    privacyPage: `
import Head from 'next/head';

export default function PrivacyPolicyPage() {
  return (
    <>
      <Head>
        <title>Privacy Policy - ${appName}</title>
      </Head>
      <div className="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <div className="prose">
          <h1>Privacy Policy</h1>
          <p><em>Last updated: ${new Date().toLocaleDateString()}</em></p>
          <p>This is a placeholder for your Privacy Policy. You should replace this content with your own policy.</p>
          <h2>1. Information We Collect</h2>
          <p>...</p>
          <h2>2. How We Use Your Information</h2>
          <p>...</p>
        </div>
      </div>
    </>
  );
}
    `,

    termsPage: `
import Head from 'next/head';

export default function TermsOfServicePage() {
  return (
    <>
      <Head>
        <title>Terms of Service - ${appName}</title>
      </Head>
      <div className="max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <div className="prose">
          <h1>Terms of Service</h1>
          <p><em>Last updated: ${new Date().toLocaleDateString()}</em></p>
          <p>This is a placeholder for your Terms of Service. You should replace this content with your own terms.</p>
          <h2>1. Acceptance of Terms</h2>
          <p>...</p>
          <h2>2. User Accounts</h2>
          <p>...</p>
        </div>
      </div>
    </>
  );
}
    `,

    getOnboardingStep: (step, totalSteps) => {
      const isFinalStep = step === totalSteps;
      return `
import Head from 'next/head';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { useState } from 'react';
import withAuth from '@/auth/withAuth';

function OnboardingStep${step}() {
  const router = useRouter();
  const [isCompleting, setIsCompleting] = useState(false);
  const [error, setError] = useState(null);

  const handleFinish = async () => {
    setIsCompleting(true);
    setError(null);
    try {
      const res = await fetch('/api/users/complete-onboarding', {
        method: 'POST',
        credentials: 'include'
      });
      if (!res.ok) {
        const errData = await res.json();
        throw new Error(errData.error || 'Failed to save onboarding status.');
      }
      router.push('/dashboard');
    } catch (err) {
      setError(err.message);
      setIsCompleting(false);
    }
  };

  return (
    <>
      <Head>
        <title>Onboarding: Step ${step} - ${appName}</title>
      </Head>
      <div className="max-w-2xl mx-auto px-4 sm:px-6 lg:px-8 py-12 text-center">
        <h1 className="text-3xl font-bold text-gray-900">Onboarding - Step ${step} of ${totalSteps}</h1>
        <div className="mt-8 p-8 bg-white border rounded-lg min-h-[200px] flex items-center justify-center">
          <p className="text-gray-600">Your content for step ${step} goes here.</p>
        </div>
        {error && <p className="mt-4 text-sm text-red-600">{error}</p>}
        <div className="mt-8 flex justify-between">
          ${step > 1 ? `<Link href="/onboarding/step-${step - 1}" className="px-6 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50">Back</Link>` : '<div></div>'}
          ${isFinalStep 
            ? `<button onClick={handleFinish} disabled={isCompleting} className="px-6 py-2 text-sm font-medium text-white bg-indigo-600 border border-transparent rounded-md hover:bg-indigo-700 disabled:bg-gray-400">{isCompleting ? 'Saving...' : 'Finish'}</button>` 
            : `<Link href="/onboarding/step-${step + 1}" className="px-6 py-2 text-sm font-medium text-white bg-indigo-600 border border-transparent rounded-md hover:bg-indigo-700">Next</Link>`
          }
        </div>
      </div>
    </>
  );
}

export default withAuth(OnboardingStep${step});
    `;
    },
    getCustomPage: (page, appName) => {
      const pageNameCamelCase = page.name.replace(/\s+/g, '');
      const pageNameUpper = page.name.replace(/\s+/g, '_').toUpperCase();
      const envVarName = `NEXT_PUBLIC_${pageNameUpper}_EMBED_TOKENS`;

      const embedsToRender = (page.embeds && page.embeds.length > 0) ? `
        <div className="mt-8 space-y-8 flex flex-col items-center">
          {embedTokens.map((token, index) => (
            <EmbedLoader key={token} apiHost={apiHost} token={token} targetId={\`embed-container-\${index}\`} />
          ))}
        </div>
    ` : "";

      const content = `
import Head from 'next/head';
${page.isProtected ? "import withAuth from '@/auth/withAuth';" : ""}
${page.embeds && page.embeds.length > 0 ? "import { useEffect, useState } from 'react';" : ""}
${page.embeds && page.embeds.length > 0 ? "import EmbedLoader from '@/components/EmbedLoader';" : ""}

function ${pageNameCamelCase}Page() {
  ${page.embeds && page.embeds.length > 0 ? `
  const [apiHost, setApiHost] = useState('');
  const [embedTokens, setEmbedTokens] = useState([]);

  useEffect(() => {
    setApiHost(process.env.NEXT_PUBLIC_QR_EMBED_URL);
    const tokens = (process.env.${envVarName} || '').split(',').filter(Boolean);
    setEmbedTokens(tokens);
  }, []);
  ` : ""}

  return (
    <>
      <Head>
        <title>${page.name} - ${appName}</title>
      </Head>
      <div className="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <h1 className="text-3xl font-bold text-gray-900">${page.name}</h1>
        <p className="mt-4 text-gray-600">
          This is the ${page.name} page.
        </p>
        ${embedsToRender}
      </div>
    </>
  );
}

export default ${page.isProtected ? `withAuth(${pageNameCamelCase}Page)` : `${pageNameCamelCase}Page`};
`;
      return content.trim();
    },
  };
};